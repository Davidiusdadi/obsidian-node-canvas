{
	"nodes":[
		{"id":"aeb90558d56fef5f","type":"text","text":"start","x":140,"y":-562,"width":100,"height":60,"color":"1"},
		{"id":"4386a365cbb6e141","type":"text","text":"This node will be executed.\n\nSpecifically the **first code block** in the node will be executed.\n\n```ts\nconsole.log('hello world')\nreturn 'Paul Atredies'\n```\n\nA returned value will travel along the arrow `-->` and become the `input` to the next node.\n","x":616,"y":-620,"width":420,"height":300},
		{"id":"1ed1261c85d4b9eb","type":"text","text":"This is a comment. \nExecution always begins at the **start**. \nThe color does not play a role.\n","x":-280,"y":-602,"width":330,"height":140,"color":"5"},
		{"id":"a262b42c867d12d6","x":-280,"y":-138,"width":580,"height":318,"type":"text","text":"```ts\nemit('gpt', 'What is his fremen name?')\nemit('gpt', 'what is his Sietch name? U___')\n\nreturn \"Darth Vader\"\n```\n\n`emit` schedules that the \"gpt\"-labeled  arrow is followed with the given payload as `input`. \nThe execution is neither *immediate* or *asynchron*  because the engine scheduler always only execute **one node at a time**. \n"},
		{"id":"313b2666ea4ef0a1","type":"text","text":"\n```ts\nreturn input.response\n```\nraw gpt response","x":120,"y":318,"width":287,"height":120},
		{"id":"b1ff29fbd719fa14","type":"text","text":"Here the intention is to wait for all inputs to finish.\n\n`this` refers is a node-local object. You can use it to store data across multiple invocations. For global state use `ctx`.  \n\n`this.join` can be used to control how the node receives inputs.\n\n`this.join.aggregate` makes the node **wait for  everything**.\n`.list()` gives us all 3 inputs as a array.\n\n```ts\n\nconst aliases = this.join.aggregate.list()\n\nstate = {\n   ...state,\n   aliases\n}\nconsole.log('final answer:', state)\n\n\n```\n","x":-266,"y":680,"width":580,"height":520},
		{"id":"e3b6a7cec8f4744e","x":452,"y":880,"width":584,"height":200,"color":"5","type":"text","text":"the final output to the terminal should be:\n```json\n{\n  name: \"Paul Atredies\",\n  aliases: [ \"Usul\", \"Muad'Dib\" ]\n}\n```"},
		{"id":"7232725f428c7c31","type":"text","text":"```yaml\nmodel: \"gpt-3.5-turbo\"\nmessages:\n - role: \"system\"\n   content: >\n\tYou will be asked a factual question a name.\n\tI want you to laconicly **only** give the name.\n\tNothing else!\n\tExample: Who is the founder of man behing Tesla\n\tYou respond:\n\tElon Musk\n\t```\n - role: \"user\"\n   content: >\n    Question:\n    {{state.name}}:\n    {{input}}\n```\n\n\n","x":492,"y":178,"width":568,"height":400,"color":"6"},
		{"id":"378b25efca5d414b","x":452,"y":720,"width":440,"height":80,"type":"text","text":"```ts\nconsole.log(`${input} is not in Dune.`)\n```"},
		{"id":"ea84d7792cf200c9","x":-280,"y":285,"width":340,"height":186,"color":"6","type":"text","text":"**decide**:\n\nDoes {{input}} appear in the Dune books?\nGive me a one word answer.\nTruthfully answer `yes` or `no`"},
		{"id":"a693c2e4437881dc","type":"text","text":"```ts\nconsole.log('GPTing: ', state.name,  input)\nreturn input\n```","x":535,"y":-39,"width":482,"height":121},
		{"id":"ef350abf60f4d236","type":"text","text":"```js\nconsole.log(`who is ${input}?`)\nstate = { name: input, aliases: []}\n\n```\n`state` is a **special variable** that is forwarded as a deep copy.\n\n","x":-280,"y":-360,"width":580,"height":180}
	],
	"edges":[
		{"id":"60afeb447e697645","fromNode":"1ed1261c85d4b9eb","fromSide":"right","toNode":"aeb90558d56fef5f","toSide":"left","toEnd":"none"},
		{"id":"40723412a62ad563","fromNode":"aeb90558d56fef5f","fromSide":"right","toNode":"4386a365cbb6e141","toSide":"left"},
		{"id":"2865ce7828c94466","fromNode":"4386a365cbb6e141","fromSide":"bottom","toNode":"ef350abf60f4d236","toSide":"top"},
		{"id":"9a29585a24490265","fromNode":"a262b42c867d12d6","fromSide":"right","toNode":"a693c2e4437881dc","toSide":"left","label":"gpt"},
		{"id":"04bccb6a2eaf4dd4","fromNode":"7232725f428c7c31","fromSide":"left","toNode":"313b2666ea4ef0a1","toSide":"right"},
		{"id":"daaa8030e29a2cd4","fromNode":"313b2666ea4ef0a1","fromSide":"left","toNode":"ea84d7792cf200c9","toSide":"right"},
		{"id":"f8ef3fac11a004df","fromNode":"b1ff29fbd719fa14","fromSide":"right","toNode":"e3b6a7cec8f4744e","toSide":"left","toEnd":"none"},
		{"id":"bef37af586f56de8","fromNode":"ef350abf60f4d236","fromSide":"bottom","toNode":"a262b42c867d12d6","toSide":"top"},
		{"id":"427e54bdb2a84ecc","fromNode":"ea84d7792cf200c9","fromSide":"bottom","toNode":"b1ff29fbd719fa14","toSide":"top","label":"yes"},
		{"id":"b2508a9e2a753d04","fromNode":"a262b42c867d12d6","fromSide":"bottom","toNode":"ea84d7792cf200c9","toSide":"top"},
		{"id":"fbe57dd8fa32e680","fromNode":"ea84d7792cf200c9","fromSide":"bottom","toNode":"378b25efca5d414b","toSide":"top","label":"no"},
		{"id":"f09a920d5fd15298","fromNode":"a693c2e4437881dc","fromSide":"bottom","toNode":"7232725f428c7c31","toSide":"top"}
	]
}