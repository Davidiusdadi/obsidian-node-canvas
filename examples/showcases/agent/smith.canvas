{
	"nodes":[
		{"id":"33c3155a4594713e","type":"group","x":320,"y":0,"width":1640,"height":840,"label":"LLM-Prompt"},
		{"id":"9524e6ed304fe9e6","type":"group","x":-370,"y":-120,"width":500,"height":460,"label":"inject tool output"},
		{"id":"0e70664f18becc7a","type":"text","text":"","x":-631,"y":-860,"width":250,"height":60},
		{"id":"051b5c18099a2a19","type":"text","text":"","x":-196,"y":-1243,"width":250,"height":60},
		{"id":"8a3bef1952d73fcd","type":"text","text":"","x":-461,"y":-790,"width":60,"height":60},
		{"id":"274d1a086030646b","type":"file","file":"showcases/agent/agent-phase.canvas","x":-922,"y":-815,"width":186,"height":109},
		{"id":"c5b4985c37495780","type":"text","text":"**tool** execution is performed before a new agent-**thought** is produced.  ","x":-1160,"y":-351,"width":210,"height":131,"color":"5"},
		{"id":"5b54c44c98fbd84f","type":"text","text":"**log**: question: {{ state.user | green }}","x":-1002,"y":-1120,"width":346,"height":60},
		{"id":"a961ec59af815223","type":"text","text":"```ts\nstate.user = input\nstate.messages = []\nstate.tools = `bash - this calles a linux terminal\nask-user - escalate a question if you are stuck`\n\nstate.tool_names = `bash or ask-user`\n\n```","x":-737,"y":-1634,"width":612,"height":347},
		{"id":"d0698b1326769e7a","type":"text","text":"just an task example task","x":-280,"y":-1895,"width":210,"height":131,"color":"5"},
		{"id":"b51e325ea3f428cd","type":"text","text":"start","x":-489,"y":-2060,"width":116,"height":60,"color":"6"},
		{"id":"c741b1e7af7eb5ea","type":"text","text":"**debug**:","x":-190,"y":-714,"width":140,"height":60},
		{"id":"0c9040f53c786a47","type":"text","text":"# check if tool needs to run \n```ts\nimport _ from 'lodash'\n\nconst last_msg = _.last(state.messages)\n\nif(last_msg?.type !== 'Action') {\n   emit('no-action')\n   return \n}\n\nstate.last_msg = last_msg\nconst action = last_msg.msg\n\nemit('action', action)\n```","x":-922,"y":-600,"width":461,"height":380},
		{"id":"d4486560eac8fa40","type":"file","file":"showcases/agent/tool-use.canvas","x":-1020,"y":221,"width":400,"height":400},
		{"id":"f7411b05cdcfd508","type":"text","text":"","x":-849,"y":-44,"width":58,"height":60},
		{"id":"1ae7c69a34cf9d35","type":"text","text":"```ts\n\nstate.last_msg.msg += input\n```","x":-350,"y":-100,"width":460,"height":112},
		{"id":"1e8a016f8ca56c2e","type":"text","text":"**log**: ⚒️ resp: {{ input | gray }}","x":-293,"y":55,"width":346,"height":60},
		{"id":"2478594e49fab4bd","type":"text","text":"```ts\nconst out = input || '<empty output>'\nreturn `Observation: ${out}`\n```","x":-330,"y":191,"width":420,"height":129},
		{"id":"55c44735ffe7276e","type":"text","text":"```ts\nimport _ from 'lodash'\nimport chalk from 'chalk'\n\nstate.system = \n`Solve the given question or task as best you can. You have access to the following tools:\n\n${state.tools}\n\nYour responses follow this looping pattern:\n\nThought: you should always think about what to do next \nAction: the action to take, should be one of ${state.tool_names}\nAction Input: the input to the action\nObservation: <tool output>\nThought: think about the observation and how to proced\nAction: next the action to take\nAction Input: the action parameters / payload\nObservation: <tool output>\nThought: ...\nAction:  ...\nAction Input: ...\nObservation: ...\n\n... (this loop can repeat N times unitl )\n\nFinal Answer: the final answer to the original input question\n\nBegin!\n\n`\n\nlet message = state.messages\n\t.map(m => {\n\tif(m.msg.startsWith(m.type)) {\n\t\treturn m.msg\n\t}\n\treturn `${m.type}: ${m.msg}`\n\t}\n).join('\\n');\n\ncolor = chalk.white\n\nswitch (state.phase) {  \n   case 'Thought': \n       state.stop = ['Action:'];\n       color = chalk.magenta\n       break;  \n   case 'Action': \n\t   state.stop = ['Observation:', 'Thought:']; \n\t   color = chalk.yellow\n\t   break;\n   default: state.stop = [];\n}\n\n\n\nconst prompt = [{\n    role: \"system\",\n    content: state.system,\n  }, {\n    role: \"user\",\n    content: state.user,\n  }\n]\n\nif(message) {\n   // console.log('convo:', color(message ))\n   prompt.push({\n    role: \"assistant\",\n    content: `${message}\\n${state.phase}: ___`\n   })\n}\n\n\nreturn prompt\n```","x":1221,"y":-2095,"width":800,"height":1685},
		{"id":"5b4a9960f05ef48b","type":"text","text":"```ts\n\nreturn `\nTell me as much as prossible about the environment you are in.\nUse bash tool research. Do not check env variables but\nexplore at least 10 different things...\n`\n\nreturn `\nCreate a bash file that contains a program\nthat reverses its command line arguments.\nMake sure to not override any exiting files and test your result.\n`\n```","x":-16,"y":-1940,"width":696,"height":220},
		{"id":"2a2d1ecc2a0a5f5b","type":"text","text":"Answer the following questions as best you can. You have access to the following tools:\n\n${state.tools}\n\nUse the following format:\n\nThought: you should always think about what to do\nAction: the action to take, should be one of ${state.tool_names}\nAction Input: the input to the action\nObservation: <tool output>\n... (this Thought/Action/Action Input/Observation can repeat N times)\n...\nFinal Answer: the final answer to the original input question\n\nBegin!\n","x":2160,"y":-1880,"width":622,"height":690},
		{"id":"4d0de2b1fa8e5722","type":"text","text":"","x":801,"y":-907,"width":250,"height":60},
		{"id":"0679ae46c4dc021e","type":"text","text":"","x":244,"y":-1287,"width":72,"height":60},
		{"id":"89c16efc2e20aeb5","type":"text","text":"**return**","x":1562,"y":-380,"width":118,"height":60,"color":"2"},
		{"id":"12855f54ccc65ff5","type":"file","file":"showcases/agent/agent-loop.canvas","x":80,"y":-815,"width":400,"height":260},
		{"id":"b22ba6aa58e5458c","type":"text","text":"```ts\nconst m = {\n    type: state.phase,\n    msg: input\n}\nstate.messages.push(m)\nreturn m;\n```","x":680,"y":-789,"width":360,"height":209},
		{"id":"e5aa2a14be9c9020","type":"text","text":"**return**","x":801,"y":-540,"width":118,"height":60,"color":"2"},
		{"id":"4de193a1703e939e","type":"text","text":"\n```ts\nconst resp = input.response\n\nif(resp.length === 0) {\n  emit('empty', input.previous)\n  return\n}\nemit('resp', resp)\n```\nraw gpt response","x":825,"y":360,"width":510,"height":300},
		{"id":"2ca16c13ec3e527d","type":"text","text":"**return**","x":955,"y":760,"width":250,"height":60,"color":"2"},
		{"id":"1d067383ea89eeca","type":"text","text":"```yaml\n#model: \"gpt-4-turbo\"\nmessages: \"{{input | json}}\"\nstop:  \"{{ state.stop | json}}\"\n```\n\n\n","x":820,"y":40,"width":520,"height":260,"color":"6"},
		{"id":"a191968b28cf71d5","type":"text","text":"```ts\nimport chalk from 'chalk'\nprocess.stdout.write(chalk.cyan(input))\n```","x":340,"y":360,"width":460,"height":100},
		{"id":"5a3fbc91b4a7e75b","type":"text","text":"```ts\ninput.push({\n    role: \"user\",\n    content: `Go on with a ${state.phase}!`,\n})\nreturn input\n```","x":1460,"y":220,"width":480,"height":210}
	],
	"edges":[
		{"id":"9f12e24fc3a87cee","fromNode":"274d1a086030646b","fromSide":"left","toNode":"0c9040f53c786a47","toSide":"left","toEnd":"none","color":"3","label":"thought"},
		{"id":"f25b274ba75e240d","fromNode":"274d1a086030646b","fromSide":"right","toNode":"8a3bef1952d73fcd","toSide":"left","toEnd":"none","color":"3","label":"action"},
		{"id":"ae0a5881076ea416","fromNode":"c741b1e7af7eb5ea","fromSide":"right","toNode":"12855f54ccc65ff5","toSide":"left","color":"6","label":"cycle"},
		{"id":"0eee9fb280b7f217","fromNode":"12855f54ccc65ff5","fromSide":"top","toNode":"0679ae46c4dc021e","toSide":"bottom","toEnd":"none","color":"3","label":"build-prompt"},
		{"id":"8329a581559b8ee9","fromNode":"12855f54ccc65ff5","fromSide":"bottom","toNode":"1d067383ea89eeca","toSide":"top","toEnd":"none","color":"3","label":"llm-completion"},
		{"id":"79fd962a182293d0","fromNode":"12855f54ccc65ff5","fromSide":"right","toNode":"b22ba6aa58e5458c","toSide":"left","color":"6","label":"answer"},
		{"id":"1df98d8c18e0984c","fromNode":"1d067383ea89eeca","fromSide":"bottom","toNode":"4de193a1703e939e","toSide":"top"},
		{"id":"84b5db870d50429c","fromNode":"5b54c44c98fbd84f","fromSide":"bottom","toNode":"274d1a086030646b","toSide":"top","label":"kick-off"},
		{"id":"9db68f625a45c90c","fromNode":"b51e325ea3f428cd","fromSide":"bottom","toNode":"5b4a9960f05ef48b","toSide":"top"},
		{"id":"8ec20f7e7bc09b21","fromNode":"5b4a9960f05ef48b","fromSide":"bottom","toNode":"a961ec59af815223","toSide":"top"},
		{"id":"fa01ba5ebacc090d","fromNode":"55c44735ffe7276e","fromSide":"bottom","toNode":"89c16efc2e20aeb5","toSide":"top"},
		{"id":"35f2f50185842838","fromNode":"8a3bef1952d73fcd","fromSide":"right","toNode":"c741b1e7af7eb5ea","toSide":"left"},
		{"id":"5e17299b56b64ddb","fromNode":"1ae7c69a34cf9d35","fromSide":"top","toNode":"c741b1e7af7eb5ea","toSide":"bottom"},
		{"id":"b5e7777580779176","fromNode":"f7411b05cdcfd508","fromSide":"bottom","toNode":"d4486560eac8fa40","toSide":"top","color":"6","label":"use-tool"},
		{"id":"3a45067e0ce680cf","fromNode":"d4486560eac8fa40","fromSide":"right","toNode":"2478594e49fab4bd","toSide":"left","color":"6","label":" tool-resp"},
		{"id":"79aadf45cf3a58e2","fromNode":"0c9040f53c786a47","fromSide":"right","toNode":"c741b1e7af7eb5ea","toSide":"left","label":"no-action"},
		{"id":"d515d78bd01cf942","fromNode":"0c9040f53c786a47","fromSide":"bottom","toNode":"f7411b05cdcfd508","toSide":"top","label":"action"},
		{"id":"05c0eb2392df4cf4","fromNode":"4de193a1703e939e","fromSide":"bottom","toNode":"2ca16c13ec3e527d","toSide":"top","label":"resp"},
		{"id":"771b7319faa7e6ea","fromNode":"4de193a1703e939e","fromSide":"right","toNode":"5a3fbc91b4a7e75b","toSide":"bottom","label":"empty\n"},
		{"id":"79c8f45a1525bae2","fromNode":"5a3fbc91b4a7e75b","fromSide":"top","toNode":"1d067383ea89eeca","toSide":"right"},
		{"id":"08e3793d4e6ca6d6","fromNode":"1d067383ea89eeca","fromSide":"left","toNode":"a191968b28cf71d5","toSide":"top","label":"stream"},
		{"id":"d331d5805e10088a","fromNode":"a961ec59af815223","fromSide":"bottom","toNode":"5b54c44c98fbd84f","toSide":"top"},
		{"id":"6a872c2d65632691","fromNode":"b22ba6aa58e5458c","fromSide":"bottom","toNode":"e5aa2a14be9c9020","toSide":"top"},
		{"id":"f9ee5ad1835eabb3","fromNode":"2478594e49fab4bd","fromSide":"top","toNode":"1e8a016f8ca56c2e","toSide":"bottom"},
		{"id":"c325fe6b4ac504c3","fromNode":"1e8a016f8ca56c2e","fromSide":"top","toNode":"1ae7c69a34cf9d35","toSide":"bottom"},
		{"id":"05ffb8000c3744b8","fromNode":"0679ae46c4dc021e","fromSide":"right","toNode":"55c44735ffe7276e","toSide":"left"}
	]
}