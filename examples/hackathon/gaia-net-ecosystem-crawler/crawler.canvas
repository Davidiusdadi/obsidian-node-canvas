{
	"nodes":[
		{"id":"f7440b123a1ce229","type":"text","text":"```yaml\nmodel: \"gpt-3.5-turbo\"\nmessages:\n - role: \"system\"\n   content: >\n\tThe user will paste raw scambled text from websites\n\tYour job is to find out where a website is based.\n\tRespond with valid JSON in the following format:\n\t```ts\n\tinterface Address  {\n\t\t\"type\": 'address'\n\t\t\"address\": string | null,\n\t\t\"precision\": 'street' | 'city' | 'country'\n\t\t\"adress_is\": 'dot_on_map' | 'area_on_map'\n\t\t\"short_comment\": string\n\t}\n\ttype Result = Address | Address[]\n\t```\n - role: \"user\"\n   content: \"{{input.text}}\"\n```\n\n\n","x":780,"y":-818,"width":679,"height":478},
		{"id":"42a12b656993982b","type":"text","text":"```ts\nimport puppeteer from 'puppeteer'\n\nconst url = input.url\nconst browser = await puppeteer.launch({\n    headless: false\n  });\n\ntry {\n  // Create a new page.\n  const page = await browser.newPage();\n\n  // Navigate to the URL.\n  await page.goto(url, {\n    waitUntil: 'domcontentloaded'\n  });\n\n  await page.waitForTimeout(4000)\n  const result = await page.evaluate(() => document.body.innerText);\n  return ctx.emit('crawled',{\n     ...input,\n     text: result\n  })\n} catch (e) {\n\tconsole.log('error: failed to crawl', url)\n} finally {\n  await browser.close();\n}\n\n\n```","x":666,"y":-1620,"width":793,"height":680},
		{"id":"1d3bb95ee11ecc86","type":"text","text":"```ts\nlet url = input.url\n\nif(!url.startsWith('http')) {\n   url = `https://${url}`\n}\nctx.state = {}\n\nreturn {\n   ...input,\n   url\n}\n```","x":-120,"y":-1439,"width":461,"height":318},
		{"id":"f86f0567406c180e","type":"text","text":"```ts\nimport {search} from 'photon-geocoder'\nimport yaml from 'yaml'\n\n\nconst place = {\n  ...input.previous\n}\ndelete place.text\n\n\nconst text_resp = input.response\nconsole.log('llmresp:', text_resp)\n\ntry {\n\tconst json_string = text_resp\n\t   .replace('```json','')\n\t   .replace('```','')\n\tconst place_adr = yaml.parse(json_string)\n\n    console.log('llmobj:', place_adr)\n\t\n\tif (place_adr.address) {\n\t   const loc_info = await search(place_adr.address, {  \n\t\t  limit: 3\n\t   })\n\t   \n\t   if(!loc_info.features) {\n\t       return \n\t   }\n\t\t\n\t   place.loc = loc_info\n\t   place.address = formatAddress(loc_info.features[0].properties)\n\t   console.log('full place:', place)\n\t   ctx.emit('complete', place)\n\t}\n\n\n\n} catch(e) {\n    console.error(`failed to parse`, text_resp, e)\n}\n\n\nfunction formatAddress(data) {\n    const {\n        name,\n        street,\n        housenumber,\n        postcode,\n        city,\n        district,\n        state,\n        country\n    } = data;\n\n    // Build the address line by line, adding each part only if it exists.\n    // Each line is conditionally included based on its presence.\n    const addressLines = [\n        name ? `${name}` : '',\n        [street, housenumber].filter(Boolean).join(' '),\n        [postcode, city].filter(Boolean).join(' '),\n        district ? `${district}` : '',\n        state ? `${state}` : '',\n        country ? `${country}` : ''\n    ].filter(line => line.length > 0).join(',');\n\n    return addressLines;\n}\n\n\n```\n\n\n\n\n\n","x":-313,"y":-720,"width":979,"height":1560},
		{"id":"4f28368100c18f9e","type":"text","text":"```yaml\naction: \"write\"\npath: \"out/{{input.name}}.md\"\ncontent: |\n   ---\n   generated: true\n   url:  {{input.url}}\n   address: {{input.address}}\n   tags: \n     - emitted\n   ---\n   # {{input.name}}\n   {{input.desc}}\n\n   ### location\n   \n   ```json\n   {{input.loc | json}}\n   ```\n```\n\nthis dataview expression shows the emitted files:\n\n```dataview\nTABLE url, address\nfrom #emitted\n```","x":-1040,"y":-370,"width":500,"height":860},
		{"id":"d2f5ef107e956917","type":"text","text":"```ts\nimport axios from 'axios'\n\nconst entries = (await axios.get(input)).data\nfor (const obj of entries) {\n   ctx.emit('obj', obj)\n}\n\n```\n","x":-1040,"y":-765,"width":520,"height":186},
		{"id":"8991d40d12a032a5","type":"link","url":"https://gist.githubusercontent.com/Davidiusdadi/24c998bff0e51f1ae809a29c558ec7d8/raw/bae1961563292f4c85356a4f403a3d7ac4621eb6/link.json","x":-1040,"y":-1340,"width":400,"height":400},
		{"id":"ff46ce3268fb0d0c","type":"text","text":"start","x":-890,"y":-1499,"width":101,"height":60,"color":"1"}
	],
	"edges":[
		{"id":"5ba93b9a677e24c6","fromNode":"d2f5ef107e956917","fromSide":"right","toNode":"1d3bb95ee11ecc86","toSide":"left","label":"obj"},
		{"id":"4f053d07085a4334","fromNode":"f7440b123a1ce229","fromSide":"bottom","toNode":"f86f0567406c180e","toSide":"right"},
		{"id":"4f70df5b3f7e87fa","fromNode":"f86f0567406c180e","fromSide":"left","toNode":"4f28368100c18f9e","toSide":"right","label":"complete"},
		{"id":"30c526883ef546dd","fromNode":"ff46ce3268fb0d0c","fromSide":"bottom","toNode":"8991d40d12a032a5","toSide":"top"},
		{"id":"afa969a270a4750e","fromNode":"8991d40d12a032a5","fromSide":"bottom","toNode":"d2f5ef107e956917","toSide":"top"},
		{"id":"23c49dd5c9e9df3a","fromNode":"1d3bb95ee11ecc86","fromSide":"right","toNode":"42a12b656993982b","toSide":"left"},
		{"id":"0e6af6890a2aea41","fromNode":"42a12b656993982b","fromSide":"bottom","toNode":"f7440b123a1ce229","toSide":"top"}
	]
}